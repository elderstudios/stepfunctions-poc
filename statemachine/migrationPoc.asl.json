{
    "Comment": "A POC state machine that migrates AMS Accounts to RAM",
    "StartAt": "Record Start of Migration",
    "States": {
        "Record Start of Migration": {
            "Type": "Task",
            "Resource": "${DDBPutItem}",
            "ResultPath": "$",
            "ResultSelector": {
                "AmsAccountId.$": "$$.Execution.Input.AccountId"
            },
            "Parameters": {
                "TableName": "${DDBMigrationsTable}",
                "Item": {
                    "Id": {
                        "S.$": "$$.Execution.Input.AccountId"
                    },
                    "Execution": {
                        "S.$": "$$.Execution.Id"
                    },
                    "Status": {
                        "S": "START"
                    },
                    "Timestamp": {
                        "S.$": "$$.State.EnteredTime"
                    }
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 20,
                    "MaxAttempts": 5,
                    "BackoffRate": 10
                }
            ],
            "Next": "Get SalesforceID From Mapping Table"
        },
        "Get SalesforceID From Mapping Table": {
            "Type": "Task",
            "Resource": "${DDBGetItem}",
            "Parameters": {
              "TableName": "${DDBAccountsSalesforceTable}",
              "Key": {
                "AccountId": {"S.$": "$.AmsAccountId"}
              }
            },
            "ResultPath": "$.DynamoDB",
            "Next": "Is SalesforceID In Mapping Table"
        },
        "Is SalesforceID In Mapping Table": {
            "Type": "Choice",
            "Choices": [
                    {
                    "Variable":"$.DynamoDB.Item.SalesforceId.S",
                    "IsPresent":true,
                    "Next":"Enrich Task with SFID"
                    }
                ],
                "Default": "Account SFID Missing"
        },
        "Account SFID Missing": {
            "Type": "Task",
            "Resource": "${DDBPutItem}",
            "ResultPath": null,
            "Parameters": {
                "TableName": "${DDBMigrationsTable}",
                "Item": {
                    "Id": {
                        "S.$": "$$.Execution.Input.AccountId"
                    },
                    "Execution": {
                        "S.$": "$$.Execution.Id"
                    },
                    "Status": {
                        "S": "SFID_MISSING"
                    },
                    "Timestamp": {
                        "S.$": "$$.State.EnteredTime"
                    }
                }
            },
            "Next": "Notify Account SFID Missing And Waiting For Approval"
        },
        "Notify Account SFID Missing And Waiting For Approval": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
            "ResultPath": null,
            "Parameters":{
                "FunctionName": "${ManualRetryFunctionName}",
                "Payload": {
                    "accountId.$":"$$.Execution.Input.AccountId",
                    "token.$":"$$.Task.Token",
                    "message": "Account SFID Not Found"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 15,
                    "MaxAttempts": 5,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "Get SalesforceID From Mapping Table"
        },
        "Enrich Task with SFID": {
            "Type": "Pass",
            "Parameters": {
              "AmsAccountId.$": "$.AmsAccountId",
              "SalesforceId.$": "$.DynamoDB.Item.SalesforceId.S"
            },
            "ResultPath": "$",
            "Next": "Find Account In Database"
        },
        "Find Account In Database": {
            "Type": "Task",
            "Resource": "${AccountFinderFunctionArn}",
            "Parameters": {
                "SalesforceId.$": "$.SalesforceId",
                "AmsAccountId.$": "$.AmsAccountId"
            },
            "ResultPath": "$.accountExists",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 15,
                    "MaxAttempts": 5,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "Is Account In Database Already"
        },
        "Is Account In Database Already": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable":"$.accountExists.accountPresent",
                    "StringEquals": "true",
                    "Next":"Notify Account Already Exists"
                  }
                ],
                "Default": "Transform Account"
        },
        "Notify Account Already Exists": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
            "ResultPath": null,
            "Parameters":{
                "FunctionName": "${ManualRetryFunctionName}",
                "Payload": {
                    "accountId.$":"$.AmsAccountId",
                    "token.$":"$$.Task.Token",
                    "message": "Account Already Exists"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 15,
                    "MaxAttempts": 5,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "Find Account In Database"
        },
        "Transform Account": {
            "Type": "Task",
            "Resource": "${AccountTransformerFunctionArn}",
            "ResultPath": "$",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 15,
                    "MaxAttempts": 5,
                    "BackoffRate": 1.5
                }
            ],
            "End": true
        }
    }
}